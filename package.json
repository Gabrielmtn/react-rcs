{
  "name": "react-rcs",
  "version": "0.0.2",
  "description": "Component specific styles for react!",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Chad Scira",
    "email": "chadvscira@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "grunt-contrib-jshint": "~0.10.0",
    "grunt": "~0.4.5",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-jasmine-node": "~0.2.1",
    "browserify": "~4.2.0"
  },
  "readmeFilename": "README.md",
  "readme": "# React Component Styles (RCS)\n\nComponent specific styles for react!\n\nReact solved the issue with organizing DOM components, but it was still missing a clean way to manage component specific styling.\n\n# Demo / Example\n\n- [live demo](http://jsfiddle.net/icodeforlove/pn2g6/embedded/result%2Ccss%2Cjs/)\n- [example project](https://github.com/icodeforlove/react-rcs-example)\n\n# How?\n\nWith RCS your CSS rules are scoped specificly to the component you're working on.\n\nSo heres your react component\n\n```html\nvar Header = React.createClass({\n\trender: function () {\n\t\treturn <div><a class=\"link\"></a></div>;\n\t}\n});\n```\n\nand heres some RCS\n\n```css\nview {\n\theight: 50px;\n\tbackground: blue;\n}\n\n.link {\n\tcolor: red;\n\n\t:hover {\n\t\tcolor: blue;\n\t}\n}\n```\n\nwe will render this component like this\n\n<div class=\"react-view react-header\"><a class=\"react-header_link\"></a></div>\n\nand we will transform the RCS into this\n\n```css\n.react-view.react-header {\n\theight: 50px;\n\tbackground: blue;\n}\n\n.react-view.react-header .react-header_link:hover {\n\tcolor: blue;\n}\n\n.react-view.react-header .react-header_link {\n\tcolor: red;\n}\n```\n\n## Best Practices\n\nWe recommand that you seperate your RCS from your components so you can compile to css with `grunt-react-rcs`, just like you do with `jsx`.\n\n## In browser transformations\n\nYou can take use in browser transformations like this just make sure use `rcs-with-transformer.js` instead of `rcs.js`\n\n```sass\n<style type=\"text/rcs\">\n\t@component Header {\n\t\tview {\n\t\t\theight: 50px;\n\t\t\tbackground: blue;\n\t\t}\n\n\t\t.link {\n\t\t\tcolor: red;\n\n\t\t\t:hover {\n\t\t\t\tcolor: blue;\n\t\t\t}\n\t\t}\n\t}\n</style>\n```\n\nor \n\n```sass\n<style type=\"text/rcs\" component=\"Header\">\n\tview {\n\t\theight: 50px;\n\t\tbackground: blue;\n\t}\n\n\t.link {\n\t\tcolor: red;\n\n\t\t:hover {\n\t\t\tcolor: blue;\n\t\t}\n\t}\n</style>\n```\n\nor\n\n```\n<link rel=\"stylesheet/rcs\" type=\"text/css\" href=\"style.rcs\">\n```\n\nor\n\n```\n<link rel=\"stylesheet/rcs\" type=\"text/css\" href=\"style.rcs\" component=\"Header\">\n```\n\nor\n\n```javascript\nvar Header = React.createClass({\n\trender: function () {\n\t\treturn <div><a class=\"link\"></a></div>;\n\t},\n\n\tstyle: {\n\t\tview: {\n\t\t\theight: '50px',\n\t\t\tbackground: 'blue'\n\t\t},\n\n\t\t'.link': {\n\t\t\tcolor: 'red',\n\n\t\t\t':hover': {\n\t\t\t\tcolor: 'blue'\n\t\t\t}\n\t\t}\n\t}\n});\n\n```\n\nor if you are using JSX with harmony\n\n```javascript\nvar Header = React.createClass({\n\trender: function () {\n\t\treturn <div><a class=\"link\"></a></div>;\n\t},\n\n\tstyle: `\n\t\tview {\n\t\t\theight: 50px;\n\t\t\tbackground: blue;\n\t\t}\n\n\t\t.link {\n\t\t\tcolor: red;\n\n\t\t\t:hover {\n\t\t\t\tcolor: blue;\n\t\t\t}\n\t\t}\n\t`\n});\n\n```\n",
  "_id": "react-rcs@0.0.2",
  "dist": {
    "shasum": "be01026749f8e3f7e84e2632af2b8c7f8f20bb85"
  },
  "_resolved": "git://github.com/icodeforlove/react-rcs.git#abe33914f799977ae93706ecf09b73996a3b684f",
  "_from": "react-rcs@git://github.com/icodeforlove/react-rcs.git"
}
